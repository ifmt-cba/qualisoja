name: Análise de Qualidade

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  code-quality:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Instalar ferramentas de qualidade
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy pylint

    - name: Verificar formatação com Black
      run: |
        black --check --diff .

    - name: Verificar imports com isort
      run: |
        isort --check-only --diff .

    - name: Análise com Flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Análise com Pylint
      run: |
        pip install -r requirements.txt
        pylint --exit-zero --load-plugins=pylint_django --django-settings-module=qualisoja.settings **/*.py

    - name: Análise de tipos com MyPy
      run: |
        mypy --ignore-missing-imports .

  dependency-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Verificar dependências desatualizadas
      run: |
        python -m pip install --upgrade pip
        pip install pip-check-updates
        pip install -r requirements.txt
        pip list --outdated

    - name: Verificar licenças
      run: |
        pip install pip-licenses
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --summary

  performance-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust

    - name: Executar aplicação para testes
      env:
        SECRET_KEY: test-secret-key-for-performance
        DEBUG: False
        ALLOWED_HOSTS: localhost,127.0.0.1
      run: |
        python manage.py migrate
        python manage.py collectstatic --noinput
        python manage.py runserver &
        sleep 10

    - name: Executar testes de performance
      run: |
        # Criar arquivo de teste básico do Locust
        cat > locustfile.py << 'EOF'
        from locust import HttpUser, task, between

        class WebsiteUser(HttpUser):
            wait_time = between(1, 3)

            @task
            def index_page(self):
                self.client.get("/")

            @task(3)
            def login_page(self):
                self.client.get("/users/login/")
        EOF
        
        # Executar teste de carga leve
        locust --headless --users 10 --spawn-rate 2 --run-time 30s --host=http://localhost:8000
