#!/usr/bin/env python3
"""
Script para testar todas as an√°lises com CRUD completo
"""

from analises.models import AnaliseUrase, AnaliseCinza, AnaliseTeorOleo, AnaliseFibra, AnaliseFosforo
import os
import sys
import django
from datetime import datetime, date, time
from decimal import Decimal

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qualisoja.settings')
django.setup()


def testar_crud_completo():
    """Testa todas as an√°lises com as novas op√ß√µes FP e SA"""

    print("üîß TESTANDO SISTEMA CRUD COMPLETO")
    print("=" * 50)

    try:
        # Teste 1: Verificar novos tipos de amostra
        print("\nüìä 1. Verificando tipos de amostra...")

        # Urase
        urase_tipos = dict(AnaliseUrase.TIPO_AMOSTRA_CHOICES)
        print(f"   ‚úÖ Urase: {list(urase_tipos.values())}")
        assert 'FP' in urase_tipos and 'SA' in urase_tipos

        # Cinza
        cinza_tipos = dict(AnaliseCinza.TIPO_AMOSTRA_CHOICES)
        print(f"   ‚úÖ Cinza: {list(cinza_tipos.values())}")
        assert 'FP' in cinza_tipos and 'SA' in cinza_tipos

        # Teor de √ìleo
        teor_tipos = dict(AnaliseTeorOleo.TIPO_AMOSTRA_CHOICES)
        print(f"   ‚úÖ Teor de √ìleo: {list(teor_tipos.values())}")
        assert 'FP' in teor_tipos and 'SA' in teor_tipos

        # Fibra
        fibra_tipos = dict(AnaliseFibra.TIPO_AMOSTRA_CHOICES)
        print(f"   ‚úÖ Fibra: {list(fibra_tipos.values())}")
        assert 'FP' in fibra_tipos and 'SA' in fibra_tipos

        # F√≥sforo
        fosforo_tipos = dict(AnaliseFosforo.TIPO_AMOSTRA_CHOICES)
        print(f"   ‚úÖ F√≥sforo: {list(fosforo_tipos.values())}")
        assert 'FP' in fosforo_tipos and 'SA' in fosforo_tipos

        # Teste 2: Criar an√°lises com novos tipos
        print("\nüß™ 2. Criando an√°lises com novos tipos...")

        # Urase - F√°brica Parada
        urase_fp = AnaliseUrase.objects.create(
            data=date.today(),
            horario=time(14, 30),
            tipo_amostra='FP',
            amostra_1=Decimal('100.5'),
            amostra_2=Decimal('98.2')
        )
        print(
            f"   ‚úÖ Urase FP criada: ID {urase_fp.id} - Resultado: {urase_fp.resultado}")

        # Cinza - Sem Amostra
        cinza_sa = AnaliseCinza.objects.create(
            data=date.today(),
            horario=time(15, 45),
            tipo_amostra='SA',
            peso_amostra=Decimal('2.0000'),
            peso_cadinho=Decimal('25.5000'),
            peso_cinza=Decimal('25.6200')
        )
        print(
            f"   ‚úÖ Cinza SA criada: ID {cinza_sa.id} - Resultado: {cinza_sa.resultado}%")

        # Teor de √ìleo - F√°brica Parada
        teor_fp = AnaliseTeorOleo.objects.create(
            data=date.today(),
            horario=time(16, 15),
            tipo_amostra='FP',
            peso_amostra=Decimal('2.100'),
            peso_tara=Decimal('25.000'),
            peso_liquido=Decimal('25.120')
        )
        print(
            f"   ‚úÖ Teor de √ìleo FP criado: ID {teor_fp.id} - Resultado: {teor_fp.teor_oleo}%")

        # Fibra - Sem Amostra
        fibra_sa = AnaliseFibra.objects.create(
            data=date.today(),
            horario=time(17, 30),
            tipo_amostra='SA',
            peso_amostra=Decimal('1.2500'),
            peso_tara=Decimal('30.0000'),
            peso_fibra=Decimal('29.8500'),
            peso_branco=Decimal('0.0200')
        )
        print(
            f"   ‚úÖ Fibra SA criada: ID {fibra_sa.id} - Resultado: {fibra_sa.resultado}%")

        # F√≥sforo - F√°brica Parada
        fosforo_fp = AnaliseFosforo.objects.create(
            data=date.today(),
            horario=time(18, 45),
            tipo_amostra='FP',
            absorbancia_amostra=Decimal('0.315000'),
            peso_amostra=Decimal('1.0000'),
            casas_decimais=1
        )
        print(
            f"   ‚úÖ F√≥sforo FP criado: ID {fosforo_fp.id} - Resultado: {fosforo_fp.get_resultado_formatado()} ppm")

        # Teste 3: Verificar contadores
        print("\nüìà 3. Verificando contadores...")
        print(f"   üìä An√°lises de Urase: {AnaliseUrase.objects.count()}")
        print(f"   üìä An√°lises de Cinza: {AnaliseCinza.objects.count()}")
        print(
            f"   üìä An√°lises de Teor de √ìleo: {AnaliseTeorOleo.objects.count()}")
        print(f"   üìä An√°lises de Fibra: {AnaliseFibra.objects.count()}")
        print(f"   üìä An√°lises de F√≥sforo: {AnaliseFosforo.objects.count()}")

        # Teste 4: URLs dispon√≠veis
        print("\nüåê 4. URLs dispon√≠veis para acesso:")
        print("   üìã Urase:")
        print("      - Lista: /analises/urase/")
        print("      - Nova: /analises/urase/cadastro/")
        print(f"      - Detalhe: /analises/urase/{urase_fp.id}/")
        print(f"      - Editar: /analises/urase/{urase_fp.id}/editar/")
        print(f"      - Excluir: /analises/urase/{urase_fp.id}/excluir/")

        print("   üìã Cinza:")
        print("      - Lista: /analises/cinza/")
        print("      - Nova: /analises/cinza/nova/")
        print(f"      - Detalhe: /analises/cinza/{cinza_sa.id}/")
        print(f"      - Editar: /analises/cinza/{cinza_sa.id}/editar/")
        print(f"      - Excluir: /analises/cinza/{cinza_sa.id}/excluir/")

        print("   üìã Teor de √ìleo:")
        print("      - Lista: /analises/teor-oleo/")
        print("      - Nova: /analises/teor-oleo/nova/")
        print(f"      - Detalhe: /analises/teor-oleo/{teor_fp.id}/")
        print(f"      - Editar: /analises/teor-oleo/{teor_fp.id}/editar/")
        print(f"      - Excluir: /analises/teor-oleo/{teor_fp.id}/excluir/")

        print("   üìã Fibra:")
        print("      - Lista: /analises/fibra/")
        print("      - Nova: /analises/fibra/nova/")
        print(f"      - Detalhe: /analises/fibra/{fibra_sa.id}/")
        print(f"      - Editar: /analises/fibra/{fibra_sa.id}/editar/")
        print(f"      - Excluir: /analises/fibra/{fibra_sa.id}/excluir/")

        print("   üìã F√≥sforo:")
        print("      - Lista: /analises/fosforo/")
        print("      - Nova: /analises/fosforo/nova/")
        print(f"      - Detalhe: /analises/fosforo/{fosforo_fp.id}/")
        print(f"      - Editar: /analises/fosforo/{fosforo_fp.id}/editar/")
        print(f"      - Excluir: /analises/fosforo/{fosforo_fp.id}/excluir/")

        print("\nüéâ SUCESSO: Todas as an√°lises est√£o padronizadas!")
        print("   ‚úÖ Novos tipos de amostra: FP (F√°brica Parada) e SA (Sem Amostra)")
        print("   ‚úÖ CRUD completo: Criar, Listar, Visualizar, Editar, Excluir")
        print("   ‚úÖ Templates modernos com Bootstrap 5")
        print("   ‚úÖ Campos bloqueados na visualiza√ß√£o")
        print("   ‚úÖ C√°lculos autom√°ticos funcionando")

        print(f"\nüöÄ Para usar, execute: python manage.py runserver")
        print(f"   E acesse: http://127.0.0.1:8000/analises/home/")

        return True

    except Exception as e:
        print(f"‚ùå ERRO: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    sucesso = testar_crud_completo()
    sys.exit(0 if sucesso else 1)
